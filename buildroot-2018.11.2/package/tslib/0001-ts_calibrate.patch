diff -Nuur tslib-1.17/tests/ts_calibrate.c tslib-1.17.mod/tests/ts_calibrate.c
--- tslib-1.17/tests/ts_calibrate.c	2018-05-18 13:11:56.000000000 +0200
+++ tslib-1.17.mod/tests/ts_calibrate.c	2019-07-08 10:20:23.160732010 +0200
@@ -125,9 +125,55 @@
 	printf("\n");
 }
 
-int main(int argc, char **argv)
+static int inRange(int soll, int ist, int delta)
+{
+  return ((ist <= soll + delta) && (ist >= soll - delta));
+}
+
+static int checkCalibration(struct tsdev *ts)
+{
+	int xCross = xres / 2;
+	int yCross = yres / 2;
+	int delta = 30;
+	clearbuf(ts);
+	ts_reconfig(ts);
+  fillrect(0, 0, xres - 1, yres - 1, 0);
+  put_string_center(xres / 2, yres / 4, "Touchscreen calibration utility", 1);
+	put_string_center(xres / 2, yres / 4 + 20, "Touch crosshair to test and finish", 2);
+  put_cross(xCross, yCross, 2 | XORMODE);
+
+  int ret;
+  struct ts_sample samp;
+  ret = ts_read(ts, &samp, 1);
+  if(inRange(xCross, samp.x, delta) && inRange(yCross, samp.y, delta))
+  {
+    printf("OK\n");
+    return 1;
+  }
+  else
+  {
+  	char *calfile = NULL;
+  	printf("failed\n");
+		if ((calfile = getenv("TSLIB_CALIBFILE")) != NULL) 
+		{
+			unlink(calfile);
+		}
+		else 
+		{
+			unlink(TS_POINTERCAL);
+		}
+
+  	fillrect(0, 0, xres - 1, yres - 1, 0);
+    put_string_center(xres / 2, yres / 4, "Touchscreen calibration utility", 1);
+	  put_string_center(xres / 2, yres / 4 + 20, "Calibration is inaccurate! Please repeat, touch anywhere to restart.", 2);
+	  clearbuf(ts);
+	  ts_read(ts, &samp, 1);
+  	return 0;
+  }
+}
+
+int calibrate(struct tsdev *ts)
 {
-	struct tsdev *ts;
 	calibration cal = {
 		.x = { 0 },
 		.y = { 0 },
@@ -137,6 +183,69 @@
 	char *calfile = NULL;
 	unsigned int i, len;
 
+  fillrect(0, 0, xres - 1, yres - 1, 0);
+	put_string_center(xres / 2, yres / 4,
+			  "Touchscreen calibration utility", 1);
+	put_string_center(xres / 2, yres / 4 + 20,
+			  "Touch crosshair to calibrate", 2);
+
+	printf("xres = %d, yres = %d\n", xres, yres);
+
+	/* Clear the buffer */
+	clearbuf(ts);
+
+	get_sample(ts, &cal, 0, 50,        50,        "Top left");
+	clearbuf(ts);
+	get_sample(ts, &cal, 1, xres - 50, 50,        "Top right");
+	clearbuf(ts);
+	get_sample(ts, &cal, 2, xres - 50, yres - 50, "Bot right");
+	clearbuf(ts);
+	get_sample(ts, &cal, 3, 50,        yres - 50, "Bot left");
+	clearbuf(ts);
+	get_sample(ts, &cal, 4, xres / 2,  yres / 2,  "Center");
+	if (perform_calibration (&cal)) {
+		printf("Calibration constants: ");
+		for (i = 0; i < 7; i++)
+			printf("%d ", cal.a[i]);
+		printf("\n");
+		if ((calfile = getenv("TSLIB_CALIBFILE")) != NULL) {
+			cal_fd = open(calfile, O_CREAT | O_TRUNC | O_RDWR,
+				      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
+		} else {
+			cal_fd = open(TS_POINTERCAL, O_CREAT | O_TRUNC | O_RDWR,
+				      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
+		}
+		if (cal_fd < 0) {
+			perror("open");
+			close_framebuffer();
+			ts_close(ts);
+			exit(1);
+		}
+
+		len = sprintf(cal_buffer, "%d %d %d %d %d %d %d %d %d",
+			      cal.a[1], cal.a[2], cal.a[0],
+			      cal.a[4], cal.a[5], cal.a[3], cal.a[6],
+			      xres, yres);
+		if (write(cal_fd, cal_buffer, len) == -1) {
+			perror("write");
+			close_framebuffer();
+			ts_close(ts);
+			exit(1);
+		}
+		close(cal_fd);
+		i = 0;
+	} else {
+		printf("Calibration failed.\n");
+		i = -1;
+	}
+	return 1;
+}
+
+int main(int argc, char **argv)
+{
+	struct tsdev *ts;
+	unsigned int i, len;
+
 	signal(SIGSEGV, sig);
 	signal(SIGINT, sig);
 	signal(SIGTERM, sig);
@@ -201,61 +310,11 @@
 	for (i = 0; i < NR_COLORS; i++)
 		setcolor(i, palette[i]);
 
-	put_string_center(xres / 2, yres / 4,
-			  "Touchscreen calibration utility", 1);
-	put_string_center(xres / 2, yres / 4 + 20,
-			  "Touch crosshair to calibrate", 2);
-
-	printf("xres = %d, yres = %d\n", xres, yres);
-
-	/* Clear the buffer */
-	clearbuf(ts);
-
-	get_sample(ts, &cal, 0, 50,        50,        "Top left");
-	clearbuf(ts);
-	get_sample(ts, &cal, 1, xres - 50, 50,        "Top right");
-	clearbuf(ts);
-	get_sample(ts, &cal, 2, xres - 50, yres - 50, "Bot right");
-	clearbuf(ts);
-	get_sample(ts, &cal, 3, 50,        yres - 50, "Bot left");
-	clearbuf(ts);
-	get_sample(ts, &cal, 4, xres / 2,  yres / 2,  "Center");
-
-	if (perform_calibration (&cal)) {
-		printf("Calibration constants: ");
-		for (i = 0; i < 7; i++)
-			printf("%d ", cal.a[i]);
-		printf("\n");
-		if ((calfile = getenv("TSLIB_CALIBFILE")) != NULL) {
-			cal_fd = open(calfile, O_CREAT | O_TRUNC | O_RDWR,
-				      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
-		} else {
-			cal_fd = open(TS_POINTERCAL, O_CREAT | O_TRUNC | O_RDWR,
-				      S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
-		}
-		if (cal_fd < 0) {
-			perror("open");
-			close_framebuffer();
-			ts_close(ts);
-			exit(1);
-		}
-
-		len = sprintf(cal_buffer, "%d %d %d %d %d %d %d %d %d",
-			      cal.a[1], cal.a[2], cal.a[0],
-			      cal.a[4], cal.a[5], cal.a[3], cal.a[6],
-			      xres, yres);
-		if (write(cal_fd, cal_buffer, len) == -1) {
-			perror("write");
-			close_framebuffer();
-			ts_close(ts);
-			exit(1);
-		}
-		close(cal_fd);
-		i = 0;
-	} else {
-		printf("Calibration failed.\n");
-		i = -1;
-	}
+  do
+  {
+    calibrate(ts);
+  }
+  while (checkCalibration(ts) == 0);
 
 	fillrect(0, 0, xres - 1, yres - 1, 0);
 	close_framebuffer();
